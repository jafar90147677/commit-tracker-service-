{
  "request": {
    "method": "POST",
    "endpoint": "/api/commits",
    "content_type": "application/json",
    "description": "Create a new commit record with diff content",
    "authentication": "Bearer token required"
  },
  "payload": {
    "commit_hash": "84cb98d0b530536e0dd96271f7e7ed1909c24eeb",
    "repository_name": "commit-tracker-service",
    "author_name": "mdasif08",
    "author_email": "mohammadasif24680@gmail.com",
    "commit_message": "Clean up test files - automatic sync working",
    "commit_date": "2025-08-26T15:56:43+05:30",
    "source_type": "LOCAL",
    "branch_name": "main",
    "files_changed": [
      "scripts/auto_sync_commit.py",
      "src/database.py",
      "test_auto_hook.md",
      "test_auto_sync.md"
    ],
    "lines_added": 139,
    "lines_deleted": 14,
    "parent_commits": ["754fb66"],
    "status": "PROCESSED",
    "metadata": {
      "feature": "automatic sync",
      "priority": "high",
      "commit_type": "cleanup"
    },
    "diff_content": "diff --git a/scripts/auto_sync_commit.py b/scripts/auto_sync_commit.py\nnew file mode 100644\nindex 0000000..acf74bc\n--- /dev/null\n+++ b/scripts/auto_sync_commit.py\n@@ -0,0 +1,89 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Automatic commit sync script for Git hooks.\n+This script automatically syncs new commits to the database.\n+\"\"\"\n+\n+import asyncio\n+import subprocess\n+import sys\n+import os\n+from datetime import datetime\n+from src.database import get_db_service\n+from src.utils.git_utils import GitUtils\n+\n+async def auto_sync_latest_commit():\n+    \"\"\"Automatically sync the most recent commit to the database.\"\"\"\n+    try:\n+        # Get the latest commit hash\n+        result = subprocess.run(\n+            [\"git\", \"rev-parse\", \"HEAD\"],\n+            capture_output=True, text=True, check=True, encoding='utf-8'\n+        )\n+        commit_hash = result.stdout.strip()\n+\n+        # Get commit details\n+        git_utils = GitUtils()\n+        commit_info = git_utils.get_commit_info(commit_hash)\n+\n+        # Store in database\n+        db_service = await get_db_service()\n+        commit_id = await db_service.store_commit(commit_info)\n+\n+        print(f\"✅ Commit {commit_hash[:8]} synced to database with ID: {commit_id}\")\n+        return commit_id\n+\n+    except Exception as e:\n+        print(f\"❌ Failed to sync commit: {e}\")\n+        return None\n+\n+if __name__ == \"__main__\":\n+    asyncio.run(auto_sync_latest_commit())\n",
    "file_diffs": {
      "scripts/auto_sync_commit.py": {
        "status": "added",
        "additions": [
          "#!/usr/bin/env python3",
          "\"\"\"",
          "Automatic commit sync script for Git hooks.",
          "This script automatically syncs new commits to the database.",
          "\"\"\"",
          "",
          "import asyncio",
          "import subprocess",
          "import sys",
          "import os",
          "from datetime import datetime",
          "from src.database import get_db_service",
          "from src.utils.git_utils import GitUtils",
          "",
          "async def auto_sync_latest_commit():",
          "    \"\"\"Automatically sync the most recent commit to the database.\"\"\"",
          "    try:",
          "        # Get the latest commit hash",
          "        result = subprocess.run(",
          "            [\"git\", \"rev-parse\", \"HEAD\"],",
          "            capture_output=True, text=True, check=True, encoding='utf-8'",
          "        )",
          "        commit_hash = result.stdout.strip()",
          "",
          "        # Get commit details",
          "        git_utils = GitUtils()",
          "        commit_info = git_utils.get_commit_info(commit_hash)",
          "",
          "        # Store in database",
          "        db_service = await get_db_service()",
          "        commit_id = await db_service.store_commit(commit_info)",
          "",
          "        print(f\"✅ Commit {commit_hash[:8]} synced to database with ID: {commit_id}\")",
          "        return commit_id",
          "",
          "    except Exception as e:",
          "        print(f\"❌ Failed to sync commit: {e}\")",
          "        return None",
          "",
          "if __name__ == \"__main__\":",
          "    asyncio.run(auto_sync_latest_commit())"
        ],
        "deletions": [],
        "diff_content": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Automatic commit sync script for Git hooks.\n+This script automatically syncs new commits to the database.\n+\"\"\"\n+\n+import asyncio\n+import subprocess\n+import sys\n+import os\n+from datetime import datetime\n+from src.database import get_db_service\n+from src.utils.git_utils import GitUtils\n+\n+async def auto_sync_latest_commit():\n+    \"\"\"Automatically sync the most recent commit to the database.\"\"\"\n+    try:\n+        # Get the latest commit hash",
        "        result = subprocess.run(",
        "            [\"git\", \"rev-parse\", \"HEAD\"],",
        "            capture_output=True, text=True, check=True, encoding='utf-8'",
        "        )\n+        commit_hash = result.stdout.strip()\n+\n+        ",
        "        git_utils = GitUtils()\n+        commit_info = git_utils.get_commit_info(commit_hash)\n+\n+        ",
        "        db_service = await get_db_service()\n+        commit_id = await db_service.store_commit(commit_info)\n+\n+        ",
        "        print(f\"✅ Commit {commit_hash[:8]} synced to database with ID: {commit_id}\")",
        "        return commit_id\n+\n+    except Exception as e:\n+        ",
        "        print(f\"❌ Failed to sync commit: {e}\")",
        "        return None\n+\n+if __name__ == \"__main__\":",
        "    asyncio.run(auto_sync_latest_commit())"
        ]
      },
      "src/database.py": {
        "status": "modified",
        "additions": [
          "        # Add new methods for commit tracking",
          "        async def store_commit(self, commit_data: dict) -> str:",
          "            \"\"\"Store a new commit in the database.\"\"\"",
          "            # Implementation details...",
          "            pass",
          "",
          "        async def get_commit_history(self, repository: str, limit: int = 50):",
          "            \"\"\"Get commit history for a repository.\"\"\"",
          "            # Implementation details...",
          "            pass"
        ],
        "deletions": [
          "        # Old implementation",
          "        async def old_method(self):",
          "            pass"
        ],
        "diff_content": "@@ -50,6 +50,20 @@\n         async def health_check(self) -> bool:\n             \"\"\"Check database health.\"\"\"\n             try:\n+                # Add new methods for commit tracking\n+                async def store_commit(self, commit_data: dict) -> str:\n+                    \"\"\"Store a new commit in the database.\"\"\"\n+                    # Implementation details...\n+                    pass\n+\n+                async def get_commit_history(self, repository: str, limit: int = 50):\n+                    \"\"\"Get commit history for a repository.\"\"\"\n+                    # Implementation details...\n+                    pass\n+\n                 return True\n             except Exception:\n                 return False"
        ]
      },
      "test_auto_hook.md": {
        "status": "deleted",
        "additions": [],
        "deletions": [
          "# Test Auto Hook",
          "Testing automatic git hook functionality."
        ],
        "diff_content": "@@ -1,2 +0,0 @@\n-# Test Auto Hook\n-Testing automatic git hook functionality."
        ]
      },
      "test_auto_sync.md": {
        "status": "deleted",
        "additions": [],
        "deletions": [
          "# Test Auto Sync",
          "Testing automatic commit sync functionality."
        ],
        "diff_content": "@@ -1,2 +0,0 @@\n-# Test Auto Sync\n-Testing automatic commit sync functionality."
        ]
      }
    }
  },
  "curl_example": "curl -X POST \"http://localhost:8001/api/commits\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer YOUR_TOKEN\" -d @commit_create_request.json",
  "expected_response": {
    "status": "success",
    "commit_id": "uuid-string-12345",
    "processing_time": 0.123
  },
  "error_responses": {
    "400": {
      "detail": "Invalid commit data"
    },
    "401": {
      "detail": "Unauthorized"
    },
    "422": {
      "detail": "Validation error"
    },
    "500": {
      "detail": "Internal server error"
    }
  }
}
